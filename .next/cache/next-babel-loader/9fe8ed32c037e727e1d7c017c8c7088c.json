{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\alari\\\\code\\\\internet-simple\\\\pages\\\\index.tsx\";\nimport { getAllPosts } from \"../lib/api\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport { useState } from \"react\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    minWidth: 275\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  },\n  topBar: {\n    marginBottom: 30\n  },\n  toolBar: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  tagButton: {\n    marginRight: 15\n  }\n}));\n\nconst Home = ({\n  posts,\n  tags\n}) => {\n  const {\n    0: tagSelected,\n    1: setTagSelected\n  } = useState();\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      className: classes.topBar,\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        className: classes.toolBar,\n        children: [tags.map(tag => /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.tagButton,\n          variant: \"contained\",\n          onClick: () => setTagSelected(tag),\n          children: tag\n        }, tag, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.tagButton,\n          variant: \"contained\",\n          onClick: () => setTagSelected(undefined),\n          children: \"Tout\"\n        }, \"all\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justify: \"center\",\n        spacing: 2,\n        children: posts.filter(post => {\n          var _post$tags;\n\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return tagSelected == undefined || ((_post$tags = post.tags) === null || _post$tags === void 0 ? void 0 : _post$tags.includes(tagSelected));\n        }).map(post => /*#__PURE__*/_jsxDEV(Article, {\n          post: post,\n          setTagSelected: setTagSelected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}; // eslint-disable-next-line @typescript-eslint/require-await\n\n\nexport async function getStaticProps() {\n  const posts = getAllPosts(['title', 'slug', 'author', 'tags', 'summary']);\n  const tags = new Set();\n  posts.forEach(post => {\n    var _post$tags2;\n\n    (_post$tags2 = post.tags) === null || _post$tags2 === void 0 ? void 0 : _post$tags2.forEach(tag => {\n      tags.add(tag);\n    });\n  });\n  return {\n    props: {\n      posts,\n      tags: Array.from(tags)\n    }\n  };\n}\nexport default Home;","map":{"version":3,"sources":["C:/Users/alari/code/internet-simple/pages/index.tsx"],"names":["getAllPosts","makeStyles","Grid","AppBar","Toolbar","Button","useState","useStyles","theme","root","minWidth","menuButton","marginRight","spacing","title","flexGrow","topBar","marginBottom","toolBar","display","justifyContent","tagButton","Home","posts","tags","tagSelected","setTagSelected","classes","map","tag","undefined","filter","post","includes","getStaticProps","Set","forEach","add","props","Array","from"],"mappings":"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","sourcesContent":["import { getAllPosts, Post } from \"../lib/api\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nimport { useState } from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        minWidth: 275,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    topBar: {\r\n        marginBottom: 30,\r\n    },\r\n    toolBar: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    tagButton: {\r\n        marginRight: 15,\r\n    },\r\n}));\r\n\r\nconst Home = ({ posts, tags }) => {\r\n    const [tagSelected, setTagSelected] = useState<string>();\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\" className={classes.topBar}>\r\n                <Toolbar className={classes.toolBar}>\r\n                    {tags.map(tag => (\r\n                        <Button\r\n                            className={classes.tagButton}\r\n                            variant=\"contained\"\r\n                            key={tag}\r\n                            onClick={() => setTagSelected(tag)}\r\n                        >\r\n                            {tag}\r\n                        </Button>\r\n                    ))}\r\n                    <Button\r\n                        className={classes.tagButton}\r\n                        variant=\"contained\"\r\n                        key=\"all\"\r\n                        onClick={() => setTagSelected(undefined)}\r\n                    >\r\n                        Tout\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Grid item xs={12}>\r\n                <Grid container justify=\"center\" spacing={2}>\r\n                    {posts.filter((post) => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n                        return tagSelected == undefined || post.tags?.includes(tagSelected);\r\n                    })\r\n                        .map((post: Post) => (\r\n                            <Article post={post} setTagSelected={ setTagSelected } />\r\n                        ))}\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/require-await\r\nexport async function getStaticProps() {\r\n    const posts = getAllPosts([\r\n        'title',\r\n        'slug',\r\n        'author',\r\n        'tags',\r\n        'summary',\r\n    ]);\r\n    const tags = new Set();\r\n    posts.forEach((post) => {\r\n        post.tags?.forEach((tag) => {\r\n            tags.add(tag);\r\n        });\r\n    });\r\n    return {\r\n        props: {\r\n            posts,\r\n            tags: Array.from(tags),\r\n        }\r\n    };\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}