{"ast":null,"code":"import fs from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = join(process.cwd(), 'posts');\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\nexport function getPostBySlug(slug, fields = []) {\n  const realSlug = slug.replace(/\\.md$/, '');\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n  const {\n    data,\n    content\n  } = matter(fileContents);\n  const items = {}; // Ensure only the minimal needed data is exposed\n\n  fields.forEach(field => {\n    if (field === 'slug') {\n      items[field] = realSlug;\n    }\n\n    if (field === 'content') {\n      items[field] = content;\n    }\n\n    if (data[field]) {\n      items[field] = data[field];\n    }\n  });\n  return items;\n}\nexport function getAllPosts(fields = []) {\n  const slugs = getPostSlugs();\n  const posts = slugs.map(slug => getPostBySlug(slug, fields));\n  return posts;\n}","map":{"version":3,"sources":["/Volumes/caseSensitive/Code/internet-simple/lib/api.ts"],"names":["fs","join","matter","postsDirectory","process","cwd","getPostSlugs","readdirSync","getPostBySlug","slug","fields","realSlug","replace","fullPath","fileContents","readFileSync","data","content","items","forEach","field","getAllPosts","slugs","posts","map"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAR,EAAD,EAAgB,OAAhB,CAA3B;AAUA,OAAO,SAASC,YAAT,GAAwB;AAC3B,SAAON,EAAE,CAACO,WAAH,CAAeJ,cAAf,CAAP;AACH;AAED,OAAO,SAASK,aAAT,CAAuBC,IAAvB,EAAqCC,MAAgB,GAAG,EAAxD,EAA4D;AAC/D,QAAMC,QAAQ,GAAGF,IAAI,CAACG,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAjB;AACA,QAAMC,QAAQ,GAAGZ,IAAI,CAACE,cAAD,EAAkB,GAAEQ,QAAS,KAA7B,CAArB;AACA,QAAMG,YAAY,GAAGd,EAAE,CAACe,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBf,MAAM,CAACY,YAAD,CAAhC;AAEA,QAAMI,KAAK,GAAG,EAAd,CAN+D,CAQjE;;AACER,EAAAA,MAAM,CAACS,OAAP,CAAgBC,KAAD,IAAW;AACtB,QAAIA,KAAK,KAAK,MAAd,EAAsB;AAClBF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeT,QAAf;AACH;;AACD,QAAIS,KAAK,KAAK,SAAd,EAAyB;AACrBF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeH,OAAf;AACH;;AAED,QAAID,IAAI,CAACI,KAAD,CAAR,EAAiB;AACbF,MAAAA,KAAK,CAACE,KAAD,CAAL,GAAeJ,IAAI,CAACI,KAAD,CAAnB;AACH;AACJ,GAXD;AAaA,SAAOF,KAAP;AACH;AAED,OAAO,SAASG,WAAT,CAAqBX,MAAgB,GAAG,EAAxC,EAA4C;AAC/C,QAAMY,KAAK,GAAGhB,YAAY,EAA1B;AACA,QAAMiB,KAAK,GAAGD,KAAK,CACdE,GADS,CACJf,IAAD,IAAUD,aAAa,CAACC,IAAD,EAAOC,MAAP,CADlB,CAAd;AAEA,SAAOa,KAAP;AACH","sourcesContent":["import fs from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\n\nconst postsDirectory = join(process.cwd(), 'posts');\n\nexport interface Post {\n    title: string;\n    author: string;\n    tags?: string[];\n    content: string;\n    slug: string;\n}\n\nexport function getPostSlugs() {\n    return fs.readdirSync(postsDirectory);\n}\n\nexport function getPostBySlug(slug: string, fields: string[] = []) {\n    const realSlug = slug.replace(/\\.md$/, '');\n    const fullPath = join(postsDirectory, `${realSlug}.md`);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n    const { data, content } = matter(fileContents);\n\n    const items = {};\n\n  // Ensure only the minimal needed data is exposed\n    fields.forEach((field) => {\n        if (field === 'slug') {\n            items[field] = realSlug;\n        }\n        if (field === 'content') {\n            items[field] = content;\n        }\n\n        if (data[field]) {\n            items[field] = data[field] as string;\n        }\n    });\n\n    return items;\n}\n\nexport function getAllPosts(fields: string[] = []) {\n    const slugs = getPostSlugs();\n    const posts = slugs\n        .map((slug) => getPostBySlug(slug, fields));\n    return posts;\n}\n"]},"metadata":{},"sourceType":"module"}