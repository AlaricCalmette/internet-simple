{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Volumes/caseSensitive/Code/internet-simple/pages/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\nimport { useState } from \"react\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      minWidth: 275\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    title: {\n      flexGrow: 1\n    },\n    topBar: {\n      marginBottom: 30\n    },\n    toolBar: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    tagButton: {\n      marginRight: 15\n    }\n  };\n});\n\nvar Home = function Home(_ref) {\n  _s();\n\n  var posts = _ref.posts,\n      tags = _ref.tags;\n\n  var _useState = useState(),\n      tagSelected = _useState[0],\n      setTagSelected = _useState[1];\n\n  var classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      className: classes.topBar,\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        className: classes.toolBar,\n        children: [tags.map(function (tag) {\n          return /*#__PURE__*/_jsxDEV(Button, {\n            className: classes.tagButton,\n            variant: \"contained\",\n            onClick: function onClick() {\n              return setTagSelected(tag);\n            },\n            children: tag\n          }, tag, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, _this);\n        }), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.tagButton,\n          variant: \"contained\",\n          onClick: function onClick() {\n            return setTagSelected(undefined);\n          },\n          children: \"Tout\"\n        }, \"all\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justify: \"center\",\n        spacing: 2,\n        children: posts.filter(function (post) {\n          var _post$tags;\n\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return tagSelected == undefined || ((_post$tags = post.tags) === null || _post$tags === void 0 ? void 0 : _post$tags.includes(tagSelected));\n        }).map(function (post) {\n          var _post$tags2;\n\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              className: classes.root,\n              children: [/*#__PURE__*/_jsxDEV(CardContent, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  className: classes.title,\n                  color: \"textSecondary\",\n                  gutterBottom: true,\n                  children: post.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 41\n                }, _this), post.summary, post.tags && ((_post$tags2 = post.tags) === null || _post$tags2 === void 0 ? void 0 : _post$tags2.map(function (tag) {\n                  return /*#__PURE__*/_jsxDEV(Chip, {\n                    className: classes.tagButton,\n                    label: tag,\n                    onClick: function onClick() {\n                      return setTagSelected(tag);\n                    }\n                  }, tag, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 80,\n                    columnNumber: 49\n                  }, _this);\n                }))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 37\n              }, _this), /*#__PURE__*/_jsxDEV(CardActions, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"small\",\n                  children: /*#__PURE__*/_jsxDEV(\"a\", {\n                    href: \"/posts/\".concat(post.slug),\n                    children: \"Lire l'article\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 62\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 41\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 37\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, _this)\n          }, post.slug, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true);\n}; // eslint-disable-next-line @typescript-eslint/require-await\n\n\n_s(Home, \"oTVTGpfMNIEpEfLMldN+XyCutew=\", false, function () {\n  return [useStyles];\n});\n\n_c = Home;\nexport var __N_SSG = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Volumes/caseSensitive/Code/internet-simple/pages/index.tsx"],"names":["makeStyles","Grid","Card","CardActions","CardContent","AppBar","Toolbar","Button","Typography","Chip","useState","useStyles","theme","root","minWidth","menuButton","marginRight","spacing","title","flexGrow","topBar","marginBottom","toolBar","display","justifyContent","tagButton","Home","posts","tags","tagSelected","setTagSelected","classes","map","tag","undefined","filter","post","includes","summary","slug"],"mappings":"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","sourcesContent":["import { getAllPosts, Post } from \"../lib/api\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\n\nimport { useState } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 275,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    topBar: {\n        marginBottom: 30,\n    },\n    toolBar: {\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    tagButton: {\n        marginRight: 15,\n    },\n}));\n\nconst Home = ({ posts, tags }) => {\n    const [tagSelected, setTagSelected] = useState<string>();\n    const classes = useStyles();\n    return (\n        <>\n            <AppBar position=\"static\" className={classes.topBar}>\n                <Toolbar className={classes.toolBar}>\n                    {tags.map(tag => (\n                        <Button\n                            className={classes.tagButton}\n                            variant=\"contained\"\n                            key={tag}\n                            onClick={() => setTagSelected(tag)}\n                        >\n                            {tag}\n                        </Button>\n                    ))}\n                    <Button\n                        className={classes.tagButton}\n                        variant=\"contained\"\n                        key=\"all\"\n                        onClick={() => setTagSelected(undefined)}\n                    >\n                        Tout\n                    </Button>\n                </Toolbar>\n            </AppBar>\n            <Grid item xs={12}>\n                <Grid container justify=\"center\" spacing={2}>\n                    {posts.filter((post) => {\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                        return tagSelected == undefined || post.tags?.includes(tagSelected);\n                    })\n                        .map((post: Post) => (\n                            <Grid key={post.slug} item>\n                                <Card className={classes.root} >\n                                    <CardContent>\n                                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                                            {post.title}\n                                        </Typography>\n                                        {post.summary}\n                                        {post.tags && post.tags?.map((tag) => {\n                                            return (\n                                                <Chip\n                                                    key={tag}\n                                                    className={classes.tagButton}\n                                                    label={tag}\n                                                    onClick={() => setTagSelected(tag)}\n                                                ></Chip>\n                                            );\n                                        })}\n                                    </CardContent>\n                                    <CardActions>\n                                        <Button size=\"small\"><a href={`/posts/${post.slug}`}>Lire l'article</a></Button>\n                                    </CardActions>\n                                </Card>\n                            </Grid>\n                        ))}\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getStaticProps() {\n    const posts = getAllPosts([\n        'title',\n        'slug',\n        'author',\n        'tags',\n        'summary',\n    ]);\n    const tags = new Set();\n    posts.forEach((post) => {\n        post.tags?.forEach((tag) => {\n            tags.add(tag);\n        });\n    });\n    return {\n        props: {\n            posts,\n            tags: Array.from(tags),\n        }\n    };\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}